class UnionFind:
    def __init__(self, size):
        self.parent = list(range(size))
        self.rank = [0] * size

    def find(self, x):
        if self.parent[x] != x:
            self.parent[x] = self.find(self.parent[x])
        return self.parent[x]

    def union(self, x, y):
        root_x = self.find(x)
        root_y = self.find(y)
        if root_x == root_y:
            return False
        if self.rank[root_x] > self.rank[root_y]:
            self.parent[root_y] = root_x
        else:
            self.parent[root_x] = root_y
            if self.rank[root_x] == self.rank[root_y]:
                self.rank[root_y] += 1
        return True

def kruskal(grafo):
    aristas = []
    for u in grafo:
        for v, peso in grafo[u].items():
            aristas.append((u, v, peso))
    aristas.sort(key=lambda x: x[2])
    
    nodos = list(grafo.keys())
    nodo_a_indice = {nodo: i for i, nodo in enumerate(nodos)}
    
    uf = UnionFind(len(nodos))
    mst = []
    
    for arista in aristas:
        u, v, peso = arista
        u_idx = nodo_a_indice[u]
        v_idx = nodo_a_indice[v]
        if uf.union(u_idx, v_idx):
            mst.append(arista)
            if len(mst) == len(nodos) - 1:
                break
    return mst

if __name__ == "__main__":
    grafo_ejemplo = {
        'A': {'B': 1, 'C': 4, 'D': 3},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'A': 3, 'B': 5, 'C': 1}
    }
    
    mst = kruskal(grafo_ejemplo)
    print("Aristas del Árbol de Expansión Mínima (MST):")
    for arista in mst:
        print(f"{arista[0]} -- {arista[1]} (peso: {arista[2]})")
