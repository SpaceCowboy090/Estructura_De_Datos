class Pila:
    def __init__(self):
        self.items = []

    def esta_vacia(self):
        return self.items == []

    def apilar(self, item):
        self.items.append(item)

    def desapilar(self):
        return self.items.pop()

    def inspeccionar(self):
        return self.items[-1]

    def tamano(self):
        return len(self.items)


def evaluar_expresion_posfija(expresion):
    pila = Pila()
    tokens = expresion.split()

    for token in tokens:
        if token.isdigit():
            pila.apilar(int(token))
        else:
            operando2 = pila.desapilar()
            operando1 = pila.desapilar()
            resultado = realizar_operacion(token, operando1, operando2)
            pila.apilar(resultado)

    return pila.desapilar()


def evaluar_expresion_prefija(expresion):
    pila = Pila()
    tokens = expresion.split()[::-1]

    for token in tokens:
        if token.isdigit():
            pila.apilar(int(token))
        else:
            operando1 = pila.desapilar()
            operando2 = pila.desapilar()
            resultado = realizar_operacion(token, operando1, operando2)
            pila.apilar(resultado)

    return pila.desapilar()


def realizar_operacion(operador, operando1, operando2):
    if operador == '+':
        return operando1 + operando2
    elif operador == '-':
        return operando1 - operando2
    elif operador == '*':
        return operando1 * operando2
    elif operador == '/':
        return operando1 / operando2
    else:
        raise ValueError("Operador no válido")


if __name__ == "__main__":
    expresion_posfija = "3 4 + 2 *"
    resultado_posfija = evaluar_expresion_posfija(expresion_posfija)
    print(f"El resultado de la expresión posfija '{expresion_posfija}' es: {resultado_posfija}")

    expresion_prefija = "* + 3 4 2"
    resultado_prefija = evaluar_expresion_prefija(expresion_prefija)
    print(f"El resultado de la expresión prefija '{expresion_prefija}' es: {resultado_prefija}")
