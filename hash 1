class HashTable:
    def __init__(self, size):
        self.size = size
        self.table = [[] for _ in range(size)]
    
    def _hash_function(self, key):
        return hash(key) % self.size
    
    def insert(self, key, value):
        hash_key = self._hash_function(key)
        bucket = self.table[hash_key]
        
        for i, (k, v) in enumerate(bucket):
            if k == key:
                bucket[i] = (key, value)
                return
        bucket.append((key, value))
    
    def search(self, key):
        hash_key = self._hash_function(key)
        bucket = self.table[hash_key]
        
        for k, v in bucket:
            if k == key:
                return v
        return None
    
    def delete(self, key):
        hash_key = self._hash_function(key)
        bucket = self.table[hash_key]
        
        for i, (k, v) in enumerate(bucket):
            if k == key:
                del bucket[i]
                return


diccionario = HashTable(10)
diccionario.insert("nombre", "Juan")
diccionario.insert("edad", 25)
diccionario.insert("ciudad", "Madrid")

print(diccionario.search("nombre")) 
print(diccionario.search("edad"))   
print(diccionario.search("ciudad")) 

diccionario.delete("edad")
print(diccionario.search("edad"))   
